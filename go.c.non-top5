// generate /tmp/mel80 80-mel data to feed to whisper_test/doit
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <strings.h>

#define FFT 128
#define FF2 65
#define N 64 // 10ms
#define NW  128        /* analysis window size   (279)            */

// twiddles resolution......
#define FFTRES 2  // 128=solid, 8=ok 4=iffy, 2=iffy, 1=nope. Best=2 for now
int fftdiv=2;  // needs to be SAME


// FFT window resolution....
//#define WINRES 256.0 // resolution of window function. This is too high
//#define WINRES 64.0 // medium, best so far really
//#define WINRES 16.0 // bit lower.....
#define WINRES 2.0 // Test resolution, 8 OK, 4 iffy, 2 absolute min though.


// sample resolution........
//#define SAMP_DIV (1<<7)  // this is OK....
//#define SAMP_MUL (1<<6)

// Testing for fun.... (4/3 seems good, 3/2 ok, 2/1 iffy,  1/0 too low)
#define SAMP_DIV (1<<3)
#define SAMP_MUL (1<<2)

#define CHANS80 80

int b[FF2]={ 0,64,32,96,16,80,48,112,8,72,40,104,24,88,56,120,4,68,36,100,
20,84,52,116,12,76,44,108,28,92,60,124,2,66,34,98,18,82,50,114,10,74,42,106,
26,90,58,122, 6,70,38,102,22,86,54,118,14,78,46,110,30,94,62,126,1};


//----------------------------------------------------------------------
void rootsofunity(int *realtwiddle, int *imtwiddle, unsigned int len)
{
    float twopi = 6.28318530717959;
    float x;
    unsigned int n;

    for(n=1; n<(len>>1); n++)
    {
       x = floor(cos(twopi*n/len)*FFTRES+0.5);  realtwiddle[n]=x;
       x = floor(-sin(twopi*n/len)*FFTRES+0.5); imtwiddle[n]=x;
       //printf("%2i:  %i, %i\n",n,realtwiddle[n],imtwiddle[n]);
    }
    //exit(0);
}

//-----------------------------------------------------------------------
void simple_fft(int *re, int *im, int *tr, int *ti, int a)
{
    unsigned int even, odd, span, log, rootindex;    // indexes
    int temp,temp1,temp2,temp3,temp4;
    log=0;
    int i;

    for(span=a>>1; span; span>>=1, log++)   
    {
        //printf("log=%i,span=%i\n",log,span);
        for(odd=span; odd<a; odd++)         // iterate over the dual nodes
        {
	    
            odd |= span;                    // iterate over odd blocks only
            even = odd ^ span;              // even part of the dual node pair
            //printf("even=%i,odd=%i\n",even,odd);
                       
            temp = re[even] + re[odd];       
            re[odd] = re[even] - re[odd];
            re[even] = temp;
           
            temp = im[even] + im[odd];           
            im[odd] = im[even] - im[odd];
            im[even] = temp;
           
            rootindex = (even<<log) & (a-1); // find root of unity index
            if(rootindex)                    // skip rootindex[0] (has an identity)
            {
	        //printf("twiddle, index=%i....\n",rootindex);
                temp1=tr[rootindex]*re[odd];		
		temp2=-ti[rootindex]*im[odd];
                temp3=tr[rootindex]*im[odd];
		temp4=ti[rootindex]*re[odd];
		// normally use 1<<28 for 32-bit overflow reporting,
		// or 1<<7 for 8-bit overflow reporting
		//if (abs(temp1)>(1<<7)) printf("oops1 %i\n",log);
		//if (abs(temp2)>(1<<7)) printf("oops2 %i\n",log);
		//if (abs(temp3)>(1<<7)) printf("oops3 %i\n",log);
		//if (abs(temp4)>(1<<7)) printf("oops4 %i\n",log);
                re[odd] = (temp1+temp2)/fftdiv;
		im[odd] = (temp3+temp4)/fftdiv;
            }
   
        } // end of loop over n
     } // end of loop over FFT stages
     //exit(0);
} //end of function



//---------------------------------------------------------------------------

void main()
{
  FILE *fp,  *fp_out;
  float f[FFT],f2[FFT],f3[201],window[FFT];
  short s[FFT];
 
  int i,j,k,m,n,posn=0,z,bot,top;

  double x,y,prev=0;
  float mel[CHANS80],tot,e,e2;
  static float mel2[CHANS80][3000];  // normally 3000
  float wts[CHANS80][201];
  float min,max,min2,max2,max3,div,mul;
  int re[FFT],im[FFT];
  int tr[FFT],ti[FFT];
  int fi[FFT],windowi[FFT];
  
  fp=fopen("wts","r"); z=fread(wts,CHANS80*201,4,fp); fclose(fp);
  rootsofunity(tr,ti,FFT);
  
  // try openLPC-style window function....
  for (i=0,j=FFT-1; i<FFT/2; i++,j--) {
     window[i]=sin(.5*M_PI*sin(M_PI*(i+.5)/FFT) * sin(M_PI*(i+.5)/FFT));
     window[j]=window[i];
  }
  for (i=0; i<FFT; i++) windowi[i]=(int)(window[i]*WINRES+0.5);
  //for (i=0; i<FFT; i++) printf("%i,",windowi[i]); printf("\n"); // exit(0);
     
  //for (i=0; i<FFT; i++) printf("%f\n",window[i]); exit(0);
  
  for (i=0; i<FFT; i++) f2[i]=0.0;
  for (i=0; i<FFT; i++) s[i]=0;
  //===========
  fp=fopen("/tmp/a64.raw","r"); fp_out=fopen("/tmp/mel80","w"); 
  //fp=fopen("/home/briansm/corpus/CHAINS/full64.raw","r"); fp_out=fopen("/tmp/mel80","w");

  //-------------------------------------------------------------------------
  max=-100;
  while(!feof(fp)) {
    z=fread(s,N,2,fp);
    for (i=NW-N,j=0; i<NW; i++,j++) {
      x=(float)s[j];
      f2[i]=x-prev; prev=x;  // 1.0 pre-emph?
    }
    max2=-100000; min2=1000000;
    for (i=0; i<NW; i++) {
      if (f2[i]>max2) max2=f2[i];
      if (f2[i]<min2) min2=f2[i];
    }
    if (-min2>max2) max2=-min2;
    //printf("max2= %.0f\n",max2);
    
    div=1.0;  while(max2>SAMP_DIV) {div*=2.0; max2/=2.0;}
    mul=1.0;  while(max2<SAMP_MUL) {mul*=2.0; max2*=2.0;}
    
    //printf("div=%f, mul=%f\n",div,mul);
    if (div!=1.0) for (i=0; i<FFT; i++) f[i]=floor(f2[i]/div+0.5);
    else for (i=0; i<FFT; i++) f[i]=floor(f2[i]*mul+0.5);
    
    //for (i=0; i<FFT; i++) printf("%.0f,",f[i]); printf("\n"); //exit(0);
    
    for (i=0; i<FFT; i++) fi[i]=(int)(f[i]*windowi[i]); 
    for (i=0; i<FFT; i++) f[i]=f[i]*window[i]; 
       
    for (i=0; i<FFT; i++) {re[i]=fi[i]; im[i]=0;}
    simple_fft(re,im,tr,ti,FFT);
    for (i=0; i<FF2; i++) {n=b[i]; x=re[n]; y=im[n]; f[i]=x*x+y*y;}
    for (i=0; i<FF2; i++) f[i]/=(WINRES*WINRES); // undo window scaling
    
    for (i=0; i<FF2; i++) f[i]=f[i]/(32768.0*32768.0);
    for (i=0; i<FF2; i++) f[i]=f[i]*(div*div);
    for (i=0; i<FF2; i++) f[i]=f[i]/(mul*mul);
    
    for (i=0; i<201; i++) f3[i]=0; // sanity
      for (n=0; n<81; n++)  {  // need to strech the FFT bins slightly....
       i=n*FF2/81;
       f3[n]=f[i];
    }
    // now estimate the 80 Mel bins...
    for (n=0; n<CHANS80; n++) {
       tot=0.0; for (i=0; i<201; i++) tot+=(f3[i])*wts[n][i];
       mel[n]=tot;
    }
 
    for (n=0; n<CHANS80; n++) {
       if (mel[n]<1e-10) mel[n]=1e-10;
       mel[n]=log10f(mel[n]);  
       if (mel[n]>max) max=mel[n];
    }
    for (n=0; n<CHANS80; n++) mel2[n][posn]=mel[n];    
    for (i=0; i<NW-N; i++) f2[i]=f2[i+N]; // shift samples down...
    posn++;
  }
   
  // tidy-up across all (up to 3000) frames now...
  for (i=0; i<posn; i++) for (n=0; n<CHANS80; n++){  
    //if (mel2[n][i]<(max-8.0)) mel2[n][i]=max-8.0; // default, too high
    //if (mel2[n][i]<(max-6.0)) mel2[n][i]=max-6.0;
    //if (mel2[n][i]<(max-5.0)) mel2[n][i]=max-5.0;
    if (mel2[n][i]<(max-4.5)) mel2[n][i]=max-4.5; // best
    mel2[n][i]=(mel2[n][i]+4.0)/4.0;
  }

  printf("max=%.4f\n",max);
  // pad out the remaining space to 30 seconds...
  for (i=posn; i<3000; i++) for (n=0; n<CHANS80; n++) mel2[n][i]=(max-8.0+4.0)/4.0;
  fwrite(mel2,80*3000,4,fp_out);
  fclose(fp); fclose(fp_out);
 
}
