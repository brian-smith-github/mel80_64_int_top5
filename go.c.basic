// generate /tmp/mel80 80-mel data to feed to whisper_test/doit
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <fftw3.h>
#include <strings.h>

#define FFT 128
#define FF2 64
#define N 64 // 10ms
#define NW  128        /* analysis window size   (279)            */

#define CHANS 80  // use 17custom i.e. hand-chosen freqs
//---------------------------------------------------------------------------

void main()
{
  FILE *fp,  *fp_out;
  float f[FFT],f2[FFT],f3[201],window[FFT],o[FFT];
  short s[FFT];
  fftwf_complex out[FFT];
  fftwf_plan fft,ifft;
  int i,j,m,n,posn=0,z;

  float x,prev=0;
  float mel[CHANS],top,tot,e,e2;
  static float mel2[CHANS][3000];
  float wts[CHANS][201];
  float min,max;
  //setup_wts(wts,iwts);
  fp=fopen("wts","r"); z=fread(wts,CHANS*201,4,fp); fclose(fp);  
  
  fft = fftwf_plan_dft_r2c_1d(FFT, f, out, FFTW_PATIENT);
  ifft = fftwf_plan_dft_c2r_1d(FFT, out, f, FFTW_PATIENT);
  for(i=0; i<FFT; i++) window[i] = 0.0;
  for (i=0; i<FFT; i++) window[i]=0.5-0.5*cos(2.0*M_PI*i/(FFT-1)); 
  // try LPCNet-style window function....
  
  for (i=0,j=FFT-1; i<FFT/2; i++,j--) {
     window[i]=sin(.5*M_PI*sin(M_PI*(i+.5)/FFT) * sin(M_PI*(i+.5)/FFT));
     window[j]=window[i];
  } 
  
  for (i=0; i<FFT; i++) o[i]=0.0; // output window
  for (i=0; i<FFT; i++) f2[i]=0.0;
  for (i=0; i<FFT; i++) s[i]=0;
  //===========
  fp=fopen("/tmp/a64.raw","r"); fp_out=fopen("/tmp/mel80","w"); 
 
  //-------------------------------------------------------------------------
  max=-100;
  while(!feof(fp)) {
    z=fread(s,N,2,fp);
    for (i=NW-N,j=0; i<NW; i++,j++) {
      x=(float)s[j]; x/=32768.0;
      f2[i]=x;
      f2[i]=x-prev; prev=x;  // 1.0 pre-emph?
    }
    for (i=0; i<FFT; i++) f[i]=f2[i]*window[i]; 
    //for (i=0; i<FFT; i++) f[i]=f2[i];  // no window?
    fftwf_execute(fft);
    for (i=0; i<201; i++) f3[i]=0;
    for (i=0; i<FF2; i++) f[i]=out[i][0]*out[i][0]+out[i][1]*out[i][1];
    for (n=0; n<81; n++)  {  // need to strech the FFT bins slightly....
       i=n*FF2/81;
       f3[n]=f[i];
    }
   
    // now estimate the 80 Mel bins...
    for (n=0; n<CHANS; n++) {
       tot=0.0; for (i=0; i<201; i++) tot+=(f3[i])*wts[n][i];
       mel[n]=tot;
    }
 
    for (n=0; n<CHANS; n++) {
       if (mel[n]<1e-10) mel[n]=1e-10;
       mel[n]=log10f(mel[n]);  
       if (mel[n]>max) max=mel[n];
    }
    for (n=0; n<CHANS; n++) mel2[n][posn]=mel[n];    
    for (i=0; i<NW-N; i++) f2[i]=f2[i+N]; // shift samples down...
    posn++;
  }
  
  
  for (i=0; i<posn; i++) for (n=0; n<CHANS; n++){  
    //if (mel2[n][i]<(max-8.0)) mel2[n][i]=max-8.0;
    //if (mel2[n][i]<(max-6.0)) mel2[n][i]=max-6.0;
    //if (mel2[n][i]<(max-5.0)) mel2[n][i]=max-5.0;
    if (mel2[n][i]<(max-4.5)) mel2[n][i]=max-4.5;  // best, regular.
    //if (mel2[n][i]<(max-4.0)) mel2[n][i]=max-4.0;
    
    mel2[n][i]=(mel2[n][i]+4.0)/4.0;
  }
  printf("max=%.4f\n",max);
  for (i=posn; i<3000; i++) for (n=0; n<CHANS; n++) mel2[n][i]=(max-8.0+4.0)/4.0;
  fwrite(mel2,80*3000,4,fp_out);
  fclose(fp); fclose(fp_out);
 
}
